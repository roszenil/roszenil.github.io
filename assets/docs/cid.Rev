################################################################################
#
# CID selfing Polimoneceae
#
# authors: Rosana Zenil-Ferguson
# last modified: 12/29/2019
################################################################################

#######################
# Reading in the Data #
#######################
setOption("useScaling","true")
NUM_STATES = 2
NUM_HIDDEN = 2
NUM_RATES = NUM_STATES * NUM_HIDDEN

###### This just defines a single model for all sites #######

### Read in sequence data for both genes

observed_phylogeny <- readTrees("basicdata/poleult.tre")[1]
data <- readCharacterDataDelimited("basicdata/pole_datadis.csv",
stateLabels=2,
type="NaturalNumbers",
delimiter=",",
headers=TRUE)

# SUPER IMPORTANT!!!: we need to expand the data to the hidden states
data_exp <- data.expandCharacters( NUM_HIDDEN )

# Get some useful variables from the data. We need these later on.
taxa <- observed_phylogeny.taxa()


### Create the fix parameter for the age of the root set to the observed age
root_age <- observed_phylogeny.rootAge()


# set my move index
mvi = 0
mni = 0


####################
# Create the rates #
####################

### Specify a prior on the diversification

### Create the constant prior parameters of the diversification rates
## Number of surviving lineages is 165

mx=(ln(165/2)/observed_phylogeny.rootAge())
sx= 0.05
rate_mean <- exp(mx+sx^2)
rate_sd <- sqrt(exp(2*mx+sx^2)*exp(sx^2-1))

### Just create 2 speciation and 2 extinctions for states A and B
### Create a lognormal distributed variable for the diversification rate
speciation_alpha ~ dnNormal(mean=rate_mean,sd=rate_sd)
moves[++mvi] = mvSlide(speciation_alpha,delta=0.20,tune=true,weight=3.0)

extinction_alpha ~ dnNormal(mean=rate_mean,sd=rate_sd)
moves[++mvi] = mvSlide(extinction_alpha,delta=0.20,tune=true,weight=3.0)

speciation_beta ~ dnExp(1.0)
moves[++mvi] = mvScale(speciation_beta,lambda=0.20,tune=true,weight=2.0)

### Create an normal distributed variable for the turnover rate
extinction_beta ~ dnNormal(0.0,1.0)
moves[++mvi] = mvSlide(extinction_beta,delta=0.20,tune=true,weight=2.0)

for (j in 1:NUM_HIDDEN) {
for (i in 1:NUM_STATES) {
if ( j == 1) {
speciation[i] := exp( speciation_alpha )
extinction[i] := exp( extinction_alpha )
} else {
index = i+(j*NUM_STATES)-NUM_STATES
speciation[index] := speciation[index-NUM_STATES] * exp( speciation_beta )
extinction[index] := exp( extinction_alpha + extinction_beta )
}
}
}


#########################################################
# Set up the transition rate matrix for all states #
#########################################################
###### This is the most flexible set-up by RZF. The RevBayes tutorials do a less parameterized CID

## I defined very loosely my gamma priors for rates in the Q-mat
shape_pr := 0.5
rate_pr := 1
############### Alternative definition or rate parameter
# Each transition rate between observed states are drawn
# from an exponential distribution with a mean of 10
# character state transitions over the tree.
#  rate_pr := observed_phylogeny.treeLength() / 10

#### First create a 4x4 matrix full of zeros
for (i in 1:4) {
for (j in 1:4) {
q[i][j] := 0.0
}
}

#Key point: The way we define the states in RevBayes is by letter. Therefore, 1=0A, 2=1A, 3=0B, and 4=1B
q_01 ~ dnGamma(shape=shape_pr, rate=rate_pr)
moves[++mvi] = mvScale(q_01, weight=2 )
q_10 ~ dnGamma(shape=shape_pr, rate=rate_pr)
moves[++mvi] = mvScale(q_10, weight=2 )
q[1][2] :=q_01
q[3][4] :=q_01
q[2][1] :=q_10
q[3][4] :=q_10

##### Alternative If we needed all the transitions to be asymetric within each hidden state one could define
#q_01A ~ dnGamma(shape=shape_pr, rate=rate_pr)
#moves[++mvi] = mvScale(q_01A, weight=2 )
#q_01B ~ dnGamma(shape=shape_pr, rate=rate_pr)
#moves[++mvi] = mvScale(q_01B, weight=2 )
#q[1][2] := q_01A
#q[3][4] := q_01B

#########################################################
# Set up the transition rate matrix for hidden states #
#########################################################
# We assume the transitions among the hidden states
# are all equal and drawn from an exponential distriubtion.
hidden_rate1 ~ dnExponential(rate_pr)
moves[++mvi] = mvScale(hidden_rate1,lambda=0.2,tune=true,weight=5)
hidden_rate2 ~ dnExponential(rate_pr)
moves[++mvi] = mvScale(hidden_rate2,lambda=0.2,tune=true,weight=5)
#### Here the hidden rates should go (alpha,beta, alpha, beta) for assymetric models
q[1][3] := hidden_rate1
q[2][4] := hidden_rate1
q[3][1] := hidden_rate2
q[4][2] := hidden_rate2
### Note, we could go a step further and define even 4 different hidden rates

######################################################################
# Create the rate matrix for the combined observed and hidden states #
######################################################################
rate_matrix := fnFreeK(q, rescaled=false, matrixExponentialMethod="scalingAndSquaring")

#####################################
# Set up the root state frequencies #
#####################################

### Create a constant variable with the prior probabilities of each rate category at the root.
rate_category_prior ~ dnDirichlet( rep(1,NUM_RATES) )
moves[++mvi] = mvBetaSimplex(rate_category_prior,tune=true,weight=2)
moves[++mvi] = mvDirichletSimplex(rate_category_prior,tune=true,weight=2)



### Sampling bias
### fix this to 165/450
sampling <- observed_phylogeny.ntips()/450

#### construct a variable for the tree drawn from a birth death process
cidmodel ~ dnCDBDP( rootAge = root_age,
speciationRates   = speciation,
extinctionRates   = extinction,
Q                 = rate_matrix,
pi                = rate_category_prior,
rho               = sampling)

### clamp the model with the "observed" tree
cidmodel.clamp( observed_phylogeny )
cidmodel.clampCharData( data_exp ) #note the clamping on the expanded dataset

#############
# The Model #
#############


### workspace model wrapper ###
mymodel = model(rate_matrix)

### set up the monitors that will output parameter values to file and screen
monitors[++mni] = mnFile(filename="output/CID_pole.trees", printgen=1, cidmodel)
monitors[++mni] = mnModel(filename="output/CID_pole.log", printgen=1)
monitors[++mni] = mnJointConditionalAncestralState(tree=observed_phylogeny, cdbdp=cidmodel, type="NaturalNumbers", printgen=1, withTips=true, withStartStates=false, filename="output/anc_states_CID_pole.log")
monitors[++mni] = mnScreen(printgen=10,q,speciation,extinction)


################
# The Analysis #
################

### workspace mcmc
mymcmc = mcmc(mymodel, monitors, moves, nruns=1, moveschedule="random")

### pre-burnin to tune the proposals
#mymcmc.burnin(generations=200,tuningInterval=50)

### run the MCMC
mymcmc.run(generations=1000)

##############################
# Summarize ancestral states #
##############################


#anc_states = readAncestralStateTrace("output/anc_states_CID_pole.log")
#anc_tree = ancestralStateTree(tree=observed_phylogeny, ancestral_state_trace_vector=anc_states, include_start_states=false, file="/home/eeg/shared/twostatesse/hisse/output/anc_states_summaryCIDpole.tree", burnin=0, summary_statistic="MAP", site=0)

q()
