<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="roszenil.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="roszenil.github.io/" rel="alternate" type="text/html" /><updated>2020-01-29T10:06:01-10:00</updated><id>roszenil.github.io/feed.xml</id><title type="html">Phylogenetic Comparative Methods at UH</title><author><name>Rosana Zenil-Ferguson</name><email>roszenil@hawaii.edu</email></author><entry><title type="html">New Paper on the arXiv!</title><link href="roszenil.github.io/posts/2019/07/05/metrics-paper.html" rel="alternate" type="text/html" title="New Paper on the arXiv!" /><published>2019-07-05T00:00:00-10:00</published><updated>2019-07-05T00:00:00-10:00</updated><id>roszenil.github.io/posts/2019/07/05/metrics-paper</id><content type="html" xml:base="roszenil.github.io/posts/2019/07/05/metrics-paper.html">&lt;p&gt;I just put a &lt;a href=&quot;https://www.biorxiv.org/content/10.1101/611509v1&quot;&gt;new paper up on the arXiv&lt;/a&gt;, and so I thought I would share it
here. This was the final paper I wrote for my Ph.D., and it’s the one I’m
most proud of, because by this point I was determining the direction that the
research was going.&lt;/p&gt;

&lt;p&gt;The paper is called “Metrics for Graph Comparison: a Practitioner’s Guide.”
It’s a survey paper, comparing different tools that can be used to compare
graphs. In research, so many people spend so much time developing new methods,
and I always think to myself, “How does this compare to the standard method? Is
it actually an improvement?” This paper attempts to take stock of a number of
standard and cutting-edge methods in graph comparison, and see what works
best.&lt;/p&gt;

&lt;p&gt;The focus is on practicality, and so we only look at distances that are linear
or near-linear (i.e. &lt;script type=&quot;math/tex&quot;&gt;O(n)&lt;/script&gt; or &lt;script type=&quot;math/tex&quot;&gt;O(n \log n)&lt;/script&gt;) in the number of vertices in
the graph.&lt;sup id=&quot;fnref:fnote1&quot;&gt;&lt;a href=&quot;#fn:fnote1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; We find that spectral methods (which are quite standard,
and have been around for some time) are strong performers all around. They are
robust, flexible, and have the added benefit of easy implementation - fast
spectral algorithms are ubiquitous in modern computing packages such a MATLAB,
SciPy, and Julia.&lt;/p&gt;

&lt;p&gt;I’ve implemented many of these distances in my Python library &lt;a href=&quot;https://www.github.com/peterewills/netcomp&quot;&gt;NetComp&lt;/a&gt;,
which you can get via &lt;code class=&quot;highlighter-rouge&quot;&gt;pip install netcomp&lt;/code&gt;. Check it out, and feel free to
post issues and/or PRs if you want to add to/modify the library.&lt;/p&gt;

&lt;p&gt;Let me know in the comments what you think! Or feel free to email me if you
have more detailed questions about graph metrics. Happy Friday!&lt;/p&gt;

&lt;!-------------------------------- FOOTER ----------------------------&gt;

&lt;!-- Wish we could put this in _includes/scripts.html. But it doesn't run from --&gt;
&lt;!-- there. It needs to be run at the bottom of the file, rather than at the   --&gt;
&lt;!-- top; perhaps that has something to do with it. Anyways, I'll just include --&gt;
&lt;!-- this chunk of HTML at the footer of all my posts, even though its fugly.  --&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://pwills-com.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:fnote1&quot;&gt;
      &lt;p&gt;This is paired with the assumption that the graph is sparse, so the
number of edges is &lt;script type=&quot;math/tex&quot;&gt;O(n \log n)&lt;/script&gt; &lt;a href=&quot;#fnref:fnote1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Rosana Zenil-Ferguson</name><email>roszenil@hawaii.edu</email></author><category term="posts" /><summary type="html">I just put a new paper up on the arXiv, and so I thought I would share it here. This was the final paper I wrote for my Ph.D., and it’s the one I’m most proud of, because by this point I was determining the direction that the research was going.</summary></entry><entry><title type="html">Types as Propositions</title><link href="roszenil.github.io/posts/2018/11/30/types.html" rel="alternate" type="text/html" title="Types as Propositions" /><published>2018-11-30T00:00:00-10:00</published><updated>2018-11-30T00:00:00-10:00</updated><id>roszenil.github.io/posts/2018/11/30/types</id><content type="html" xml:base="roszenil.github.io/posts/2018/11/30/types.html">&lt;p&gt;Some of the most meaningful mathematical realizations that I’ve had have been
unexpected connections between two topics; that is, realizing that two concepts
that first appeared quite distinct are in fact one and the same. In our first
linear algebra courses, we learn that manipulations of matrices is, in fact,
equivalent to solving systems of equations. In quantum mechanics, we see that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Observable&quot;&gt;physically observable quantities&lt;/a&gt; are, mathematically speaking, linear
operators (I still don’t quite grok this one). And, my personal favorite
example, we learn in functional analysis that the linear functionals in the dual
space of a Hilbert space are themselves in perfect correspondence with the
functions in the original space.&lt;sup id=&quot;fnref:fnote1&quot;&gt;&lt;a href=&quot;#fn:fnote1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Recently, I’ve stumbled upon another such result, which has captured my
attention for a while. The result, often referred to as Curry-Howard
correspondence, is the statement that propositions in a formal logical system
are equivalent to types in the simply typed lambda calculus. Loosely, this means
that &lt;strong&gt;logical statements are equivalent to data types&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Let’s unpack that a bit; “propositions” are just statements in a logical
system.&lt;sup id=&quot;fnref:fnote15&quot;&gt;&lt;a href=&quot;#fn:fnote15&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; In mathematics, for example, one might put forward the
proposition “no even numbers are prime,” or “14 is greater than 18”. Note that
propositions need not be &lt;em&gt;true&lt;/em&gt;; in fact, some logical systems support
propositions that cannot even be determined to be true or false.&lt;sup id=&quot;fnref:fnote2&quot;&gt;&lt;a href=&quot;#fn:fnote2&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;
“Types” can be though of as types in a computing language; &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Boolean&lt;/code&gt;,
and so on. We will have much more to say about types as we move forward, but for
now, hold in your mind the conventional notion of types as defined in a language
such as Java or Python (or better yet, Haskell).&lt;/p&gt;

&lt;p&gt;How on earth could these two be in correspondence? On the surface, they appear
entirely separate concepts. In this post, I’ll spend some time unpacking what
this equivalence is actually saying, using a simple example. I am far from a
full understanding of it, but as usual, I write about it in the hopes that I’ll
be forced to clarify what I &lt;em&gt;do&lt;/em&gt; understand, or even better, be corrected by
someone more knowledgable than myself.&lt;/p&gt;

&lt;p&gt;Speaking of those more knowledgable than myself, there are various resources
online that I found very helpful in understanding the correspondence:
&lt;a href=&quot;https://www.youtube.com/watch?v=IOiZatlZtGU&amp;amp;t=1176s&quot;&gt;Philip Wadler’s talk&lt;/a&gt; on the subject is a great starting point, and there
are a number of &lt;a href=&quot;http://lambda-the-ultimate.org/node/1532&quot;&gt;useful&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/questions/2969140/what-are-the-most-interesting-equivalences-arising-from-the-curry-howard-isomorp&quot;&gt;discussions&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/questions/2829347/a-question-about-logic-and-the-curry-howard-correspondence&quot;&gt;available&lt;/a&gt; on StackExchange and
various functional programming forums.&lt;/p&gt;

&lt;h2 id=&quot;an-example&quot;&gt;An Example&lt;/h2&gt;

&lt;p&gt;I was confused by the idea of propositions as types when I first encountered it,
and after learning more, I believe that the root of my confusion lies in the
fact that types such as &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Boolean&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;, which we are
familiar with from programming, correspond to very trivial propositions, making
them poor examples. We’ll have to introduce something a bit fancier; a
&lt;em&gt;conditional type&lt;/em&gt;. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;OddInt&lt;/code&gt; might be odd Integers, and &lt;code class=&quot;highlighter-rouge&quot;&gt;PrimeInt&lt;/code&gt;
might be prime integers. We’ll approximate these conditional types with custom
classes in Scala. Classes and types are &lt;a href=&quot;https://stackoverflow.com/questions/5031640/what-is-the-difference-between-a-class-and-a-type-in-scala-and-java&quot;&gt;different beasts&lt;/a&gt;, of course, but
we will ignore that distinction in this post.&lt;sup id=&quot;fnref:fnote3&quot;&gt;&lt;a href=&quot;#fn:fnote3&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Let’s consider one conditional type in particular: &lt;code class=&quot;highlighter-rouge&quot;&gt;BigInteger&lt;/code&gt;. This type
(actually a class in this example) is defined as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BigInteger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LOWER_BOUND&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LOWER_BOUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Too small!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BigInteger($value)&quot;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One could then instantiate a &lt;code class=&quot;highlighter-rouge&quot;&gt;BigInteger&lt;/code&gt; as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;big&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BigInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// res0: BigInteger(10001)
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;small&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BigInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Too&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;small!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now the fundemanetal question: what proposition corresponds to this type?  In
simple scenarios like this, the corresponding proposition is that the type can
be &lt;em&gt;inhabited&lt;/em&gt;; that is, there exists a value that satisfies that type. For
example, the type &lt;code class=&quot;highlighter-rouge&quot;&gt;BigInteger&lt;/code&gt; corresponds to the claim “there exists an integer
\(i\) for which \( i &amp;gt; 10,000 \)”. Obviously, such an integer exists, and the
fact that we can instantiate this type indicates that it corresponds to a true
proposition. Alternatively, consider a type &lt;code class=&quot;highlighter-rouge&quot;&gt;WeirdInteger&lt;/code&gt;, which is an integer
satisfying &lt;code class=&quot;highlighter-rouge&quot;&gt;i &amp;lt; 3 &amp;amp;&amp;amp; i &amp;gt; 5&lt;/code&gt;. We can define the type well enough, but there are
no values which satisfy it; it is an uninhabitable type, and so corresponds to a
false proposition.&lt;/p&gt;

&lt;h2 id=&quot;functions-and-implication&quot;&gt;Functions and Implication&lt;/h2&gt;

&lt;p&gt;Let’s make things a little more interesting. In programming languages, there are
not only primitive types like &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Boolean&lt;/code&gt;, but there are also
&lt;strong&gt;function types&lt;/strong&gt;, which are the types of functions. For example, in Scala, the
function &lt;code class=&quot;highlighter-rouge&quot;&gt;def f(x: Int) = x.toString&lt;/code&gt; has type &lt;code class=&quot;highlighter-rouge&quot;&gt;Int =&amp;gt; String&lt;/code&gt;, which is to say
it is a function that maps integers to strings.&lt;/p&gt;

&lt;p&gt;What sort of propositions would &lt;em&gt;functions&lt;/em&gt; correspond to? It turns out that
functions naturally map to &lt;em&gt;implication&lt;/em&gt;. In some ways, the correspondence here
is very natural. Consider the conditional type &lt;code class=&quot;highlighter-rouge&quot;&gt;BigInteger&lt;/code&gt;, and the conditional
type &lt;code class=&quot;highlighter-rouge&quot;&gt;BiggerInteger&lt;/code&gt;. The definition of the latter should look familiar, from
above:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BiggerInteger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LOWER_BOUND&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20000&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LOWER_BOUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Too small!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BiggerInteger($value)&quot;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, we can write a function that maps &lt;code class=&quot;highlighter-rouge&quot;&gt;BigInteger&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;BiggerInteger&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeBigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BigInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BiggerInteger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BiggerInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Recall that the proposition corresponding to the type &lt;code class=&quot;highlighter-rouge&quot;&gt;BigInteger&lt;/code&gt; is the
statement “there exists an integer greater than 10,000”, and the proposition
corresponding to &lt;code class=&quot;highlighter-rouge&quot;&gt;Bigger&lt;/code&gt; is the statement “there exists an integer greater than
20,000”; the proposition corresponding to the function type &lt;code class=&quot;highlighter-rouge&quot;&gt;BigInteger =&amp;gt;
BiggerInteger&lt;/code&gt; is then just the statement “the existence of an integer above
10,000 implies the existence of an integer above 20,000”. And note that, as it
should be for an implication, we do not care whether there actually &lt;em&gt;does&lt;/em&gt; exist
an integer above 10,000; we simply know that &lt;em&gt;if&lt;/em&gt; one exists, then its existence
implies the existence of an integer above 20,000.&lt;/p&gt;

&lt;p&gt;To be a bit more explicit, the function that we wrote above can be thought of as
a &lt;strong&gt;proof&lt;/strong&gt; of the implication; in particular, if we suppose that there exists
an \(i\) such that \(i &amp;gt; 10,000\), then clearly \(2i &amp;gt; 20,000\), and so
if we let \(j=2i\), then we have proven the existence of a \(j\) such that
\(j &amp;gt; 20,000\). This is what the theoretical computer scientists mean when
they say that “programs are proofs”.&lt;/p&gt;

&lt;p&gt;Of course, Scala is not a proof-checking language, and cannot tell during
compilation that the function &lt;code class=&quot;highlighter-rouge&quot;&gt;makeBigger&lt;/code&gt; is valid; we would need a much richer
type system to be able to validate such functions. Consider that the following
function compiles with no problem, although there are no input values for which
it will not throw a (runtime) exception:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wonky&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BigInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BiggerInteger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BiggerInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;wait-what&quot;&gt;Wait… what?&lt;/h3&gt;

&lt;p&gt;If you think about it a bit more, it’s sort of a weird example; you
could map &lt;em&gt;any&lt;/em&gt; type to &lt;code class=&quot;highlighter-rouge&quot;&gt;BiggerInteger&lt;/code&gt;, just by doing &lt;code class=&quot;highlighter-rouge&quot;&gt;def f[A](a:A):
BiggerInteger = new BiggerInteger(20001)&lt;/code&gt;. This is because the proposition that
corresponds to &lt;code class=&quot;highlighter-rouge&quot;&gt;BiggerInteger&lt;/code&gt; is true (the type is inhabitable), and if B is
true, then A implies B for any A at all.&lt;/p&gt;

&lt;p&gt;Common languages such as Haskell only express very trivial propositions with
their types; there does exist one uninhabitable type (&lt;code class=&quot;highlighter-rouge&quot;&gt;void&lt;/code&gt;), but I have not
found much use for it in practice. The benefit of using conditional types for
these examples is that we can explore at least some types which have
corresponding &lt;em&gt;false&lt;/em&gt; propositions, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;WeirdInteger&lt;/code&gt;, which are integers
&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; which satisfy &lt;code class=&quot;highlighter-rouge&quot;&gt;i &amp;lt; 3 &amp;amp;&amp;amp; i &amp;gt; 5&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h2&gt;

&lt;p&gt;Seeing all this, you can begin to get a sense of how computer-assisted proof
techniques might arise out of it. If the fact that a program compiles is
equivalent to the truth the corrsponding proposition, then all we need is a
language with a rich enough type system to express interesting
statements. Examples of languages used in this way include &lt;a href=&quot;https://coq.inria.fr/&quot;&gt;Coq&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Agda_(programming_language&quot;&gt;Agda&lt;/a&gt;. A thorough discussion of such languages is beyond both the scope of
this post and my understanding.&lt;/p&gt;

&lt;p&gt;I think what keeps me interested in this subject is that it still remains quite
opaque to me; I’ve struggled to even come up with these simple (and flawed)
examples of how Curry-Howard correspondence plays out in practice. I hope that
anyone reading this who understand the subject better than I do will leave a
detailed list of my misunderstandings, so that I can better grasp this
mysterious and fascinating topic.&lt;/p&gt;

&lt;!-------------------------------- FOOTER ----------------------------&gt;

&lt;!-- Wish we could put this in _includes/scripts.html. But it doesn't run from --&gt;
&lt;!-- there. It needs to be run at the bottom of the file, rather than at the   --&gt;
&lt;!-- top; perhaps that has something to do with it. Anyways, I'll just include --&gt;
&lt;!-- this chunk of HTML at the footer of all my posts, even though its fugly.  --&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://pwills-com.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:fnote1&quot;&gt;
      &lt;p&gt;This statement is difficult to understand without background in
functional analysis, but it is in fact one of the most beautiful examples of
such an equivalence result. &lt;a href=&quot;#fnref:fnote1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote15&quot;&gt;
      &lt;p&gt;I’m being a bit sloppy here. The type of logic we’re talking about
here is not classical logic, but rather in the sense of &lt;a href=&quot;https://en.wikipedia.org/wiki/Natural_deduction&quot;&gt;natural deduction&lt;/a&gt;. &lt;a href=&quot;#fnref:fnote15&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote2&quot;&gt;
      &lt;p&gt;Such systems are called undecidable; see
&lt;a href=&quot;https://en.wikipedia.org/wiki/Decidability_(logic)&quot;&gt;the wiki entry on decidability&lt;/a&gt; for more information. &lt;a href=&quot;#fnref:fnote2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote3&quot;&gt;
      &lt;p&gt;We won’t be careful about whether the idea of conditional types
presented here corresponds well with conditional types as they are actually
implemented in programming languages such as &lt;a href=&quot;https://github.com/Microsoft/TypeScript/pull/21316&quot;&gt;Typescript&lt;/a&gt;. &lt;a href=&quot;#fnref:fnote3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Rosana Zenil-Ferguson</name><email>roszenil@hawaii.edu</email></author><category term="posts" /><summary type="html">Some of the most meaningful mathematical realizations that I’ve had have been unexpected connections between two topics; that is, realizing that two concepts that first appeared quite distinct are in fact one and the same. In our first linear algebra courses, we learn that manipulations of matrices is, in fact, equivalent to solving systems of equations. In quantum mechanics, we see that physically observable quantities are, mathematically speaking, linear operators (I still don’t quite grok this one). And, my personal favorite example, we learn in functional analysis that the linear functionals in the dual space of a Hilbert space are themselves in perfect correspondence with the functions in the original space.1 This statement is difficult to understand without background in &amp;#8617;</summary></entry><entry><title type="html">Inverse Transform Sampling in Python</title><link href="roszenil.github.io/posts/2018/06/24/sampling.html" rel="alternate" type="text/html" title="Inverse Transform Sampling in Python" /><published>2018-06-24T00:00:00-10:00</published><updated>2018-06-24T00:00:00-10:00</updated><id>roszenil.github.io/posts/2018/06/24/sampling</id><content type="html" xml:base="roszenil.github.io/posts/2018/06/24/sampling.html">&lt;p&gt;When doing data work, we often need to sample random variables. This is easy to
do if one wishes to sample from a Gaussian, or a uniform random variable, or a
variety of other common distributions, but what if we want to sample from an
arbitrary distribution? There is no obvious way to do this within
&lt;code class=&quot;highlighter-rouge&quot;&gt;scipy.stats&lt;/code&gt;. So, I build a small library, &lt;a href=&quot;https://www.github.com/peterewills/itsample&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;inverse-transform-sample&lt;/code&gt;&lt;/a&gt;,
that allows for sampling from arbitrary user provided distributions. In use, it
looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pdf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# unit Gaussian, not normalized&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;itsample&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;samples&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# generate 1000 samples from pdf	&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The code is available &lt;a href=&quot;https://www.github.com/peterewills/itsample&quot;&gt;on GitHub&lt;/a&gt;. In this post, I’ll outline the theory of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Inverse_transform_sampling&quot;&gt;inverse transform sampling&lt;/a&gt;, discuss computational details, and outline some
of the challenges faced in implementation.&lt;/p&gt;

&lt;h2 id=&quot;introduction-to-inverse-transform-sampling&quot;&gt;Introduction to Inverse Transform Sampling&lt;/h2&gt;

&lt;p&gt;Suppose we have a probability density function \(p(x)\), which has an
associated cumulative density function (CDF) \(F(x)\), defined as usual by&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;F(x) = \int_{-\infty}^x p(s)ds.&lt;/script&gt;

&lt;p&gt;Recall that the cumulative density function \(F(x)\) tells us &lt;em&gt;the probability
that a random sample from \(p\) is less than or equal to x&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let’s take a second to notice something here. If we knew, for some x, that
\(F(x)=t\), then drawing \(x\) from \(p\) is in some way &lt;strong&gt;equivalent to
drawing \(t\) from a uniform random variable on \([0,1]\)&lt;/strong&gt;, since the CDF for
a uniform random variable is \(F_u(t) = t\).&lt;sup id=&quot;fnref:fnote1&quot;&gt;&lt;a href=&quot;#fn:fnote1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;That realization is the basis for inverse transform sampling. The procedure is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Draw a sample \(t\) uniformly from the inverval \([0,1]\).&lt;/li&gt;
  &lt;li&gt;Solve the equation \(F(x)=t\) for \(x\) (invert the CDF).&lt;/li&gt;
  &lt;li&gt;Return the resulting \(x\) as the sample from \(p\).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;computational-considerations&quot;&gt;Computational Considerations&lt;/h2&gt;

&lt;p&gt;Most of the computational work done in the above algorithm comes in at step 2,
in which the CDF is inverted.&lt;sup id=&quot;fnref:fnote2&quot;&gt;&lt;a href=&quot;#fn:fnote2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; Consider Newton’s method, a typical
routine for finding numerical solutions to equations: the approach is iterative,
and so the function to be inverted, in our case the CDF \(F(x)\), is evaluated
many times. Now, in our case, since \(F\) is a (numerically computed) integral
of \(p\), this means that we will have to run our numerical quadrature routine
once for each evaluation of \(F\). Since we need &lt;em&gt;many&lt;/em&gt; evaluations of \(F\)
for a single sample, this can lead to a significant slowdown in sampling.&lt;/p&gt;

&lt;p&gt;Again, the pain point here is that our CDF \(F(x)\) is slow to evaluate,
because each evaluation requires numerical quadrature. What we need is an
approximation of the CDF that is fast to evaluate, as well as accurate.&lt;/p&gt;

&lt;h3 id=&quot;chebyshev-approximation-of-the-cdf&quot;&gt;Chebyshev Approximation of the CDF&lt;/h3&gt;

&lt;p&gt;I snooped around on the internet a bit, and found &lt;a href=&quot;https://github.com/scipy/scipy/issues/3747&quot;&gt;this feature request&lt;/a&gt; for
scipy, which is related to this same issue. Although it never got off the
ground, I found an interesting link to &lt;a href=&quot;https://arxiv.org/pdf/1307.1223.pdf&quot;&gt;a 2013 paper by Olver &amp;amp; Townsend&lt;/a&gt;, in
which they suggest using Chebyshev polynomials to approximate the PDF. The
advantage of this approach is that the integral of a series of Chebyshev
polynomials is known analytically - that is, if we know the Chebyshev expansion
of the PDF, we automatically know the Chebyshev expansion of the CDF as
well. This should allow us to rapidly invert the (Chebyshev approximation of
the) CDF, and thus sample from the distribution efficiently.&lt;/p&gt;

&lt;h3 id=&quot;other-approaches&quot;&gt;Other Approaches&lt;/h3&gt;

&lt;p&gt;There are also less mathematically sophisticated approaches that immediately
present themselves. One might consider solving \(F(x)=t\) on a grid of \(t\)
values, and then building the function \(F^{-1}(x)\) by interpolation. One
could even simply transform the provided PDF into a histogram, and then use the
functionality built in to &lt;code class=&quot;highlighter-rouge&quot;&gt;scipy.stats&lt;/code&gt; for sampling from a provided histogram
(more on that later). However, due to time constraints,
&lt;code class=&quot;highlighter-rouge&quot;&gt;inverse-transform-sample&lt;/code&gt; only includes the numerical quadrature and Chebyshev
approaches.&lt;/p&gt;

&lt;h2 id=&quot;implementation-in-python&quot;&gt;Implementation in Python&lt;/h2&gt;

&lt;p&gt;The implementation of this approach is not horribly sophisticated, but in
exchange it exhibits that wonderful readability characteristic of Python
code. The complexity is the highest in the methods implementing the
Chebyshev-based approach; those without a background in numerical analysis may
wonder, for example, why the function is evaluted on &lt;a href=&quot;https://en.wikipedia.org/wiki/Chebyshev_nodes&quot;&gt;that particularly strange 
set of nodes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the quadrature-based approach, both the numerical quadrature and root-finding
are both done via &lt;code class=&quot;highlighter-rouge&quot;&gt;scipy&lt;/code&gt; library (&lt;code class=&quot;highlighter-rouge&quot;&gt;scipy.integrate.quad&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;scipy.optimize.root&lt;/code&gt;, respectively). When using this approach, one can set the
boundaries of the PDF to be infinite, as &lt;code class=&quot;highlighter-rouge&quot;&gt;scipy.integrate.quad&lt;/code&gt; supports
improper integrals. In the &lt;a href=&quot;https://github.com/peterewills/itsample/blob/master/example.ipynb&quot;&gt;notebook of examples&lt;/a&gt;, we show that the samples
generated by this approach do, at least in the eyeball norm, conform to the
provided PDF. As we expected, this approach is slow - it takes about 7 seconds to generate
5,000 samples from a unit normal.&lt;/p&gt;

&lt;p&gt;As with the quadrature and root-finding, pre-rolled functional from &lt;code class=&quot;highlighter-rouge&quot;&gt;scipy&lt;/code&gt; was
used to both compute and evaluate the Chebyshev approximants. When approximating
a PDF using Chebyshev polynomials, finite bounds must be provided. A
user-determined tolerance determines the order of the Chebyshev approximation;
however, rather than computing a true error, we simply use the size of the last
few coefficients of the Chebyshev coefficients as an approximation. Since this
approach differs from the previousl only in the way that the CDF is constructed,
we use the same function &lt;code class=&quot;highlighter-rouge&quot;&gt;sample&lt;/code&gt; for both approaches; an option
&lt;code class=&quot;highlighter-rouge&quot;&gt;chebyshev=True&lt;/code&gt; will generate a Chebyshev approximant of the CDF, rather than
using numerical quadrature.&lt;/p&gt;

&lt;p&gt;I hoped that the Chebyshev approach would improve on this by an order of
magnitude or two; however, my hopes were thwarted. The implementation of the
Chebyshev approach is faster by perhaps a factor of 2 or 3, but does not offer
the kind of improvement I had hoped for. What happened? In testing, a single
evaluation of the Chebyshev CDF was not much faster than a single evaluation of
the quadrature CDF. The advantage of the Chebyshev CDF comes when one wishes to
evaluate a long, vectorized set of inputs; in this case, the Chebyshev CDF is
orders of magnitude faster than quadrature. But &lt;code class=&quot;highlighter-rouge&quot;&gt;scipy.optimize.root&lt;/code&gt; does not
appear to take advantage of vectorization, which makes sense - in simple
iteration schemes, the value at which the next iteration occurs depends on the
outcome of the current iteration, so there is not a simple way to vectorize the
algorithm.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I suspect that the reason this feature is absent from large-scale library like
&lt;code class=&quot;highlighter-rouge&quot;&gt;scipy&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;numpy&lt;/code&gt; is that it is difficult to build a sampler that is both fast
and accurate over a large enough class of PDFs. My approach sacrifices speed;
other approximation schemes may be very fast, but may not provide the accuracy
guarantees needed by some users.&lt;/p&gt;

&lt;p&gt;What we’re left with is a library that is useful for generating small numbers
(less than 100,000) of samples. It’s worth noting that in the work of Olver &amp;amp;
Townsend, they seem to be able to use the Chebyshev approach to sample orders of
magnitude faster than my impelmentation, but sadly their Matlab code is nowhere
to be found in the Matlab library &lt;a href=&quot;http://www.chebfun.org/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chebfun&lt;/code&gt;&lt;/a&gt;, which is the location
advertised in their work. Presumably they implemented their own root-finder, or
Chebyshev approximation scheme, or both. There’s a lot of space for improvement
here, but I simply ran out of time and energy on this one; if you feel inspired,
&lt;a href=&quot;https://github.com/peterewills/itsample#contributing&quot;&gt;fork the repo&lt;/a&gt; and submit a pull request!&lt;/p&gt;

&lt;!-------------------------------- FOOTER ----------------------------&gt;

&lt;!-- Wish we could put this in _includes/scripts.html. But it doesn't run from --&gt;
&lt;!-- there. It needs to be run at the bottom of the file, rather than at the   --&gt;
&lt;!-- top; perhaps that has something to do with it. Anyways, I'll just include --&gt;
&lt;!-- this chunk of HTML at the footer of all my posts, even though its fugly.  --&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://pwills-com.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:fnote1&quot;&gt;
      &lt;p&gt;This is only true for \(t\in [0,1]\). For \(t&amp;lt;0\),
\(F_u(t)=0\), and for \(t&amp;gt;1\), \(F_u(t)=1\). &lt;a href=&quot;#fnref:fnote1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote2&quot;&gt;
      &lt;p&gt;The inverse of the CDF is often called the percentile point function,
or PPF. &lt;a href=&quot;#fnref:fnote2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Rosana Zenil-Ferguson</name><email>roszenil@hawaii.edu</email></author><category term="posts" /><summary type="html">When doing data work, we often need to sample random variables. This is easy to do if one wishes to sample from a Gaussian, or a uniform random variable, or a variety of other common distributions, but what if we want to sample from an arbitrary distribution? There is no obvious way to do this within scipy.stats. So, I build a small library, inverse-transform-sample, that allows for sampling from arbitrary user provided distributions. In use, it looks like this:</summary></entry><entry><title type="html">Algorithmic Musical Genre Classification</title><link href="roszenil.github.io/posts/2018/06/06/genre.html" rel="alternate" type="text/html" title="Algorithmic Musical Genre Classification" /><published>2018-06-06T00:00:00-10:00</published><updated>2018-06-06T00:00:00-10:00</updated><id>roszenil.github.io/posts/2018/06/06/genre</id><content type="html" xml:base="roszenil.github.io/posts/2018/06/06/genre.html">&lt;p&gt;In this project, I construct a data pipeline which intakes raw &lt;code class=&quot;highlighter-rouge&quot;&gt;.wav&lt;/code&gt; files, and
then uses machine learning to predict the genre of the track. We first do a
frequency-space transformation (similar to the Fourier transform), and then do
randomized dimension reduction on the resulting array. Finally, we put the
dimension-reduced signal through a naive Bayes classifier, which we train on
about 500 sample tracks…&lt;/p&gt;

&lt;p&gt;If you are not automatically redirected, please &lt;a href=&quot;/portfolio/genre_cls&quot;&gt;click here&lt;/a&gt;&lt;/p&gt;

&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=/portfolio/genre_cls&quot; /&gt;</content><author><name>Rosana Zenil-Ferguson</name><email>roszenil@hawaii.edu</email></author><category term="posts" /><summary type="html">In this project, I construct a data pipeline which intakes raw .wav files, and then uses machine learning to predict the genre of the track. We first do a frequency-space transformation (similar to the Fourier transform), and then do randomized dimension reduction on the resulting array. Finally, we put the dimension-reduced signal through a naive Bayes classifier, which we train on about 500 sample tracks…</summary></entry><entry><title type="html">The Meaning of Entropy</title><link href="roszenil.github.io/posts/2018/02/06/entropy.html" rel="alternate" type="text/html" title="The Meaning of Entropy" /><published>2018-02-06T00:00:00-10:00</published><updated>2018-02-06T00:00:00-10:00</updated><id>roszenil.github.io/posts/2018/02/06/entropy</id><content type="html" xml:base="roszenil.github.io/posts/2018/02/06/entropy.html">&lt;p&gt;&lt;strong&gt;Entropy&lt;/strong&gt; is a word that we see a lot in various forms. It’s classical use
  comes from thermodynamics: e.g. “the entropy in the universe is always
  increasing.” With the recent boom in statistics and machine learning, the word
  has also seen a surge in use in information-theoretic contexts: e.g. “minimize
  the cross-entropy of the validation set.”&lt;/p&gt;

&lt;p&gt;It’s been an ongoing investigation for me, trying to figure out just what the
  hell this information-theoretic entropy is all about, and how it connects to
  the notion I’m familiar with from statistical mechanics. Reading through the
  wonderful book &lt;a href=&quot;https://www.amazon.com/Data-Analysis-Bayesian-Devinderjit-Sivia/dp/0198568320&quot;&gt;Data Analysis: a Bayesian Tutorial&lt;/a&gt; by D. S. Sivia, I
  found the first connection between these two notions that really clicked for
  me. I’m going to run through the basic argument here, in the hope that
  reframing it in my own words will help me understand it more thoroughly.&lt;/p&gt;

&lt;h2 id=&quot;entropy-in-thermodynamics&quot;&gt;Entropy in Thermodynamics&lt;/h2&gt;

&lt;p&gt;Let’s start with the more intuitive notion, which is that of thermodynamic
entropy. This notion, when poorly explained, can seem opaque or quixotic;
however, when viewed through the right lens, it is straightforward, and the law
of increasing entropy becomes a highly intuitive result.&lt;/p&gt;

&lt;h3 id=&quot;counting-microstates&quot;&gt;Counting Microstates&lt;/h3&gt;

&lt;p&gt;Imagine, if you will, the bedroom of a teenager. We want to talk about the
entropy of two different states: the state of being “messy” and the state of
being “clean.” We will call these &lt;strong&gt;macrostates&lt;/strong&gt;; they describe the macroscopic
(large-scale) view of the room. However, there are also many different
microstates. One can resolve these on a variety of scales, but let’s just say
they correspond to the location/position of each individual object in the
room. To review:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Definition&lt;/th&gt;
      &lt;th&gt;Example&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Macrostate&lt;/td&gt;
      &lt;td&gt;Overall Description&lt;/td&gt;
      &lt;td&gt;“Messy”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Microstate&lt;/td&gt;
      &lt;td&gt;Fine-Scale Description&lt;/td&gt;
      &lt;td&gt;“Underwear on lamp, shoes in bed, etc.”&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;the-boltzmann-entropy&quot;&gt;The Boltzmann Entropy&lt;/h3&gt;

&lt;p&gt;One might notice an interesting fact: that there are many more possible
microstates that correspond to “messy” than there are microstates that
correspond to “clean.” &lt;strong&gt;This is exactly what we mean when we say that a messy
room has higher entropy.&lt;/strong&gt; In particular, the entropy of a macrostate is &lt;strong&gt;the
log of the number of microstates that correspond to that macrostate.&lt;/strong&gt; We call
this the Boltzmann entropy, and denote it by \(S_B\). If there are
\(\Omega\) possible microstates that correspond to the macrostate of being
“messy,” then we define the entropy of this state as&lt;sup id=&quot;fnref:fnote2&quot;&gt;&lt;a href=&quot;#fn:fnote2&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;S_B(\text{messy}) = \log(\Omega).&lt;/script&gt;

&lt;p&gt;This is essentiall all we need to know here.&lt;sup id=&quot;fnref:fnote1&quot;&gt;&lt;a href=&quot;#fn:fnote1&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; The entropy tells us how many
different ways there are to get a certian state. A pyramid of oranges in a
supermarket has lower entropy than the oranges fallen all over the floor,
because there are many configurations of oranges that we would call “oranges all
over the floor,” but very few that we would call “a nicely organized pyramid of
oranges.”&lt;/p&gt;

&lt;p&gt;In this context, the law of increasing entropy becomes almost tautological. If
things are moving around in our bedroom at random, and we call &lt;em&gt;most&lt;/em&gt; of those
configurations “messy,” then the room will tend towards messyness rather than
cleanliness. We sometimes use the terms “order” and “disorder” to refer to
states of relatively low and high entropy, respectively.&lt;/p&gt;

&lt;h2 id=&quot;entropy-in-information-theory&quot;&gt;Entropy in Information Theory&lt;/h2&gt;

&lt;p&gt;One also frequently encounters a notion of entropy in statistics and information
theory. This is called the &lt;em&gt;Shannon entropy&lt;/em&gt;, and the motivation for this post
is my persistent puzzlement over the connection between Boltzmann’s notion of
entropy and Shannon’s. Previous to reading &lt;a href=&quot;https://www.amazon.com/Data-Analysis-Bayesian-Devinderjit-Sivia/dp/0198568320&quot;&gt;D. Sivia’s manual&lt;/a&gt;, I only knew
the definition of Shannon entropy, but his work presented such a clear
exposition of the connection to Boltzmann’s ideas that I felt compelled to share it.&lt;/p&gt;

&lt;h3 id=&quot;permutations-and-probabilities&quot;&gt;Permutations and Probabilities&lt;/h3&gt;

&lt;p&gt;We’ll work with a thought experiment.&lt;sup id=&quot;fnref:fnote3&quot;&gt;&lt;a href=&quot;#fn:fnote3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; Suppose we have \(N\) subjects
we organize into \(M\) groups, with \(N\gg M\). Let \(n_i\) indicate the
number of subjects that are in the \(i^\text{th}\) group, for
\(i=1,\ldots,M\). Of course,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sum_{i=1}^M n_i = N,&lt;/script&gt;

&lt;p&gt;and if we choose a person at random the probability that they are in group
\(i\) is&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;p_i = \frac{n_i}{N}.&lt;/script&gt;

&lt;p&gt;The &lt;strong&gt;Shannon entropy&lt;/strong&gt; of such a discrete distribution is defined as&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;S = -\sum_{i=1}^M p_i\log(p_i)&lt;/script&gt;

&lt;p&gt;But why? Why \(p\log(p)\)? Let’s look and see.&lt;/p&gt;

&lt;p&gt;A macrostate of this system is defined by the size of the groups \(n_i\);
equivalently, it is defined as the probability distribution. A microstate of
this system is specifying the group of each subject: the specification that
subject number \(j\) is in group \(i\) for each \(j=1,\ldots,N\). How many
microstates correspond to a given macrostate? For the first group, we can fill
it with any of the \(N\) participants, and we must choose \(n_1\) members of
the group, so the number of ways of assigning participants to this group is&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;{N\choose n_1} = \frac{N!}{n_1!(N-n_1)!}&lt;/script&gt;

&lt;p&gt;For the second group, there are \(N - n_1\) remaining subjects, and we must assign
\(n_2\) of them, and so on. Thus, the total number of ways of arranging the
\(N\) balls into the groups of size \(n_i\) is&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Omega = {N\choose n_1}{N-n_1 \choose n_2}\ldots {N-n_1-\ldots-n_{M-1}\choose n_M}.&lt;/script&gt;

&lt;p&gt;This horrendous list of binomial coefficients can be simplified down to just&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Omega =  \frac{N!}{n_1!n_2!\ldots n_M!}.&lt;/script&gt;

&lt;p&gt;The Boltzmann entropy of this macrostate is then&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;S_B = \log(\Omega) = \log(N!) - \sum_{i=1}^M \log(n_i!)&lt;/script&gt;

&lt;h3 id=&quot;from-boltzmann-to-shannon&quot;&gt;From Boltzmann to Shannon&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;We will now show that the Boltzmann entropy is (approimxately) a scaling of the
Shannon entropy&lt;/strong&gt;; in particular, \(S_B \approx N\,S\). Things are going to get
slightly complicated in the algebra, but hang on. If you’d prefer, you can take
my word for it, and skip to the next section.&lt;/p&gt;

&lt;p&gt;We will use the Stirling approximation \(\log(n!)\approx n\log(n)\)&lt;sup id=&quot;fnref:fnote4&quot;&gt;&lt;a href=&quot;#fn:fnote4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;
to simplify:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;S_B \approx N\log(N) - \sum_{i=1}^M n_i\log(n_i)&lt;/script&gt;

&lt;p&gt;Since the probability \(p_i=n_i/N\), we can re-express \(S_b\) in terms of
\(p_i\) via&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;S_B \approx N\log(N)-N\sum_{i=1}^M p_i\log(Np_i)&lt;/script&gt;

&lt;p&gt;Since \(\sum_ip_i=1\), we have&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;S_B \approx -N\sum_{i=1}^M p_i\log(p_i) = N \, S.&lt;/script&gt;

&lt;p&gt;Phew! So, the Boltzmann entropy \(S_b\) of having \(N\) students in \(M\)
groups with sized \(n_i\) is (approximately) \(N\) times the Shannon
entropy.&lt;/p&gt;

&lt;h2 id=&quot;who-cares&quot;&gt;Who Cares?&lt;/h2&gt;

&lt;p&gt;Admittedly, this kind of theoretical revalation will probably not change the way
you deploy cross-entropy in your machine learning projects. It is primarily used
because its gradients behave well, which is important in the stochastic
gradient-descent algorithms favored by modern deep-learning
architectures. However, I personally have a strong dislike of using tools that I
don’t have both a theoretical understanding of; hopefully you now have a better
grip on the theoretical underpinnings of cross entropy, and its relationship to
statistical mechanics.&lt;/p&gt;

&lt;!-------------------------------- FOOTER ----------------------------&gt;

&lt;!-- Wish we could put this in _includes/scripts.html. But it doesn't run from --&gt;
&lt;!-- there. It needs to be run at the bottom of the file, rather than at the   --&gt;
&lt;!-- top; perhaps that has something to do with it. Anyways, I'll just include --&gt;
&lt;!-- this chunk of HTML at the footer of all my posts, even though its fugly.  --&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://pwills-com.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:fnote2&quot;&gt;
      &lt;p&gt;Often a constant will be included in this definition, so that
\(S=k_B \log(\Omega)\). This constant is arbitrary, as it simply rescales
the units of our entropy, and it will only serve to get in the way of our
analysis, so we omit it. &lt;a href=&quot;#fnref:fnote2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote1&quot;&gt;
      &lt;p&gt;All we need to know for the purpose of establishing a connection
between thermodynamic and information-theoretic entropy; of course there is
much more to know, and there are many alternative ways of conceptualizing
entropy. However, none of these have ever been intuitive to me in the way
that Boltzmann’s definition of entropy is. &lt;a href=&quot;#fnref:fnote1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote3&quot;&gt;
      &lt;p&gt;We have slightly rephrased Sivia’s presentation to fit our purposes here. &lt;a href=&quot;#fnref:fnote3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote4&quot;&gt;
      &lt;p&gt;The most commonly used form of Stirling’s approximation is the more
precise \(\log(n!)\approx n\log(n)-n\), but we use a coarser form here. &lt;a href=&quot;#fnref:fnote4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Rosana Zenil-Ferguson</name><email>roszenil@hawaii.edu</email></author><category term="posts" /><summary type="html">Entropy is a word that we see a lot in various forms. It’s classical use comes from thermodynamics: e.g. “the entropy in the universe is always increasing.” With the recent boom in statistics and machine learning, the word has also seen a surge in use in information-theoretic contexts: e.g. “minimize the cross-entropy of the validation set.” It’s been an ongoing investigation for me, trying to figure out just what the hell this information-theoretic entropy is all about, and how it connects to the notion I’m familiar with from statistical mechanics. Reading through the wonderful book Data Analysis: a Bayesian Tutorial by D. S. Sivia, I found the first connection between these two notions that really clicked for me. I’m going to run through the basic argument here, in the hope that reframing it in my own words will help me understand it more thoroughly. Entropy in Thermodynamics</summary></entry><entry><title type="html">Building a Personal Site with Jekyll &amp;amp; Minimal Mistakes</title><link href="roszenil.github.io/posts/2017/12/20/website.html" rel="alternate" type="text/html" title="Building a Personal Site with Jekyll &amp; Minimal Mistakes" /><published>2017-12-20T00:00:00-10:00</published><updated>2017-12-20T00:00:00-10:00</updated><id>roszenil.github.io/posts/2017/12/20/website</id><content type="html" xml:base="roszenil.github.io/posts/2017/12/20/website.html">&lt;p&gt;I learned a lot while building this website; I hope to share it so that it might
be helpful for anyone trying to do the same. I’m sure you’ll notice that I’m far
from an expert in the subjects we’re going to explore here; this is my first
foray into web development. If you have any corrections, or things I’ve
misunderstood, I’d love to hear about it! Just post a comment.&lt;/p&gt;

&lt;p&gt;The site is built using &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, using the theme &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/&quot;&gt;Minimal Mistakes&lt;/a&gt;. I
host it on &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github pages&lt;/a&gt;, and purchased and manage my domain through
&lt;a href=&quot;https://domains.google/#/&quot;&gt;Google Domains&lt;/a&gt;. We’ll go through each of these steps in detail. I’ll assume
that you have the up-to-date versions of Ruby and Jekyll on your local
machine. I’m going through all this in macOS, which may affect some of the shell
commands I give, but translating to Windows shouldn’t be too hard.&lt;/p&gt;

&lt;h2 id=&quot;making-a-site-with-minimal-mistakes&quot;&gt;Making a site with Minimal Mistakes&lt;/h2&gt;

&lt;p&gt;The website for Minimal Mistakes includes a great quick-start guide; I
recommend the &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/docs/quick-start-guide/#starting-from-jekyll-new&quot;&gt;Starting with &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll new&lt;/code&gt;&lt;/a&gt; section as a place to
start. Using this you shoudl be able to establish a base site with some
simple demonstration content.&lt;/p&gt;

&lt;h3 id=&quot;enabling-mathjax&quot;&gt;Enabling MathJax&lt;/h3&gt;

&lt;p&gt;In order to enable &lt;a href=&quot;https://www.mathjax.org&quot;&gt;MathJax&lt;/a&gt;, which renders the mathematical equations you see in
my posts, you’ll need to edit the file &lt;code class=&quot;highlighter-rouge&quot;&gt;scripts.html&lt;/code&gt; contained in the folder
&lt;code class=&quot;highlighter-rouge&quot;&gt;_includes/&lt;/code&gt; to include a line enabling MathJax. However, you’ll want to avoid
overwriting the contents of the default &lt;code class=&quot;highlighter-rouge&quot;&gt;scripts.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, we need to find where &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle&lt;/code&gt; is storing the Gem for Minimal Mistakes. To
find this, do&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle show minimal-mistakes-jekyll 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you just want to navigate directly to that directory, do&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd $(bundle show minimal-mistakes-jekyll)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you can copy the default &lt;code class=&quot;highlighter-rouge&quot;&gt;scripts.html&lt;/code&gt; into your site:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp _includes/scripts.html /path/to/site/_includes/scripts.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Open the copied &lt;code class=&quot;highlighter-rouge&quot;&gt;scripts.html&lt;/code&gt; in your editor of choice,&lt;sup id=&quot;fnref:fnote1&quot;&gt;&lt;a href=&quot;#fn:fnote1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; and add the
following lines at the end:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt; 
 
{% if page.mathjax %}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;async&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt; 
{% endif %} 
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And you’re done!&lt;sup id=&quot;fnref:fnote2&quot;&gt;&lt;a href=&quot;#fn:fnote2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;  Now, you can type &lt;code class=&quot;highlighter-rouge&quot;&gt;$$x_1$$&lt;/code&gt; to see &lt;script type=&quot;math/tex&quot;&gt;x_1&lt;/script&gt;, and so
on. The &lt;code class=&quot;highlighter-rouge&quot;&gt;$$...$$&lt;/code&gt; syntax will generate inline math if used inline, and will
generate a display equation if used on its own line. So, if one enters&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$$ f(a) = \frac{1}{2\pi i} \oint_\gamma \frac{f(z)}{z-a} dz $$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then the rendered equation appears as so:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(a) = \frac{1}{2\pi i} \oint_\gamma \frac{f(z)}{z-a} dz&lt;/script&gt;

&lt;h3 id=&quot;customize-font-sizes&quot;&gt;Customize Font Sizes&lt;/h3&gt;

&lt;p&gt;I found the fonts a bit oversized, so I wanted to change the size for the
posts. In order to do this, you need to copy &lt;strong&gt;the entire folder&lt;/strong&gt; which
contains all the relevant scss files. In order to do this, do&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd $(bundle show minimal-mistakes-jekyll)
cp -r _sass /path/to/site
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, after much digging through the GitHub issues,&lt;sup id=&quot;fnref:fnote3&quot;&gt;&lt;a href=&quot;#fn:fnote3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; I found that the
file to edit here is &lt;code class=&quot;highlighter-rouge&quot;&gt;_sass/_reset.scss&lt;/code&gt;. In my site, the relevant chunk of text
looks like&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;  @include breakpoint($medium) {
    font-size: 13px;
  }

  @include breakpoint($large) {
    font-size: 15px;
  }

  @include breakpoint($x-large) {
    font-size: 18px;
  }&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once this file has been edited, you should see the font size reduced in your
page.&lt;/p&gt;

&lt;h2 id=&quot;getting-it-on-github-pages&quot;&gt;Getting it on GitHub Pages&lt;/h2&gt;

&lt;p&gt;Okay, now we write a bunch of nonsense, find some beautiful pictures at
&lt;a href=&quot;https://git-scm.com/docs/gittutorial&quot;&gt;Unsplash&lt;/a&gt; to use as headers, and we’re ready to publish the thing on GitHub
Pages. I’ll first go through as though we don’t want to use a custom domain, so
that the website will be exposed at &lt;code class=&quot;highlighter-rouge&quot;&gt;USERNAME.github.io&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;enabling-jekyll-remote-theme&quot;&gt;Enabling &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-remote-theme&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;First of all, make sure that you’re using the &lt;code class=&quot;highlighter-rouge&quot;&gt;remote-theme&lt;/code&gt; jekyll plugin,
which allows you to use any jekyll theme that is GitHub hosted, rather than only
the few that are officially supported. This process is outlined on the Minimal
Mistakes website, but I’ll go through it here.&lt;/p&gt;

&lt;p&gt;First, &lt;strong&gt;in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file&lt;/strong&gt;, enable the plugin by including it in the
&lt;code class=&quot;highlighter-rouge&quot;&gt;plugins&lt;/code&gt; list, via&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;plugins:
  - jekyll-remote-theme
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you have other plugins you want to use (I use &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-feed&lt;/code&gt;), then add them
to this list as well. Designate the &lt;code class=&quot;highlighter-rouge&quot;&gt;remote_theme&lt;/code&gt; variable, but do so &lt;strong&gt;after
setting the theme&lt;/strong&gt;, so that you have in your config file&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;theme: &quot;minimal-mistakes-jekyll&quot;
remote_theme: &quot;mmistakes/minimal-mistakes&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, in your &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;, add &lt;code class=&quot;highlighter-rouge&quot;&gt;gem &quot;jekyll-remote-theme&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;push-it-to-the-repository&quot;&gt;Push it to the repository&lt;/h3&gt;

&lt;p&gt;GitHub pages looks for a repository that follows the naming convention
&lt;code class=&quot;highlighter-rouge&quot;&gt;USERNAME.github.io&lt;/code&gt;. So, for example, since my GitHub username is
&lt;code class=&quot;highlighter-rouge&quot;&gt;peterewills&lt;/code&gt;, the repository for the source of this site is at
&lt;code class=&quot;highlighter-rouge&quot;&gt;https://www.github.com/peterewills/peterewills.github.io&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once you’ve created such a repository, initialize a git repo on your site by
going into &lt;code class=&quot;highlighter-rouge&quot;&gt;path/to/your/site&lt;/code&gt; and doing &lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt;. Then, do&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote add origin https://www.github.com/USERNAME/USERNAME.github.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then commit and push. (If you’re unfamiliar with using git, I recommend
&lt;a href=&quot;https://git-scm.com/docs/gittutorial&quot;&gt;either&lt;/a&gt; of &lt;a href=&quot;https://try.github.io/levels/1/challenges/1&quot;&gt;these&lt;/a&gt; tutorials.) You’ll get an email that your page build
was successful, but you’re “using an unsupported theme.” Don’t worry about this;
it happens whenever you use &lt;code class=&quot;highlighter-rouge&quot;&gt;remote-theme&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You now should be able to navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;USERNAME.github.io&lt;/code&gt; and see your page!&lt;/p&gt;

&lt;h2 id=&quot;using-a-custom-domain&quot;&gt;Using a Custom Domain&lt;/h2&gt;

&lt;p&gt;Suppose you’d prefer to use a custom domain, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;mydomain.pizza&lt;/code&gt; (this is
actually a real, and available, domain name). There are lots of ways to do this;
I did it through &lt;a href=&quot;https://domains.google.com&quot;&gt;Google Domains&lt;/a&gt;, so I’ll go through those steps.&lt;/p&gt;

&lt;p&gt;First, you go to &lt;a href=&quot;https://domains.google.com&quot;&gt;Google Domains&lt;/a&gt;, pick out the domain you want, and register
it. For this example, we’ll assume you went with &lt;code class=&quot;highlighter-rouge&quot;&gt;mydomain.pizza&lt;/code&gt;. You should
now see it appear under the &lt;strong&gt;My Domains&lt;/strong&gt; tab on the right side of the
page. You should see a domain called &lt;code class=&quot;highlighter-rouge&quot;&gt;mydomain.pizza&lt;/code&gt; and a &lt;strong&gt;DNS&lt;/strong&gt; option. This
is what we need to edit.&lt;/p&gt;

&lt;p&gt;We need to configure the DNS behavior of our domain so that it points at the IP
address where GitHub Pages is hosting it. On the DNS page, scroll down to
&lt;strong&gt;Custom Resource Records&lt;/strong&gt;. You’ll want to add three custom resource records;
two “host” resource records (designated by an A) and one “alias” resource record
(designated by CNAME). GitHub pages exposes its sites at IP addresses
192.30.252.153 and 192.30.252.154. So, you’ll want to add both of these as host
resource records. You’ll want to add your GitHub Pages url &lt;code class=&quot;highlighter-rouge&quot;&gt;USERNAME.github.io&lt;/code&gt;
as an alias record. By the time you’ve added the three, your list of resource
records should look like the example below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/custom_resource.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, now your url (&lt;code class=&quot;highlighter-rouge&quot;&gt;mydomain.pizza&lt;/code&gt;) knows that it is an alias for
&lt;code class=&quot;highlighter-rouge&quot;&gt;USERNAME.github.io&lt;/code&gt;, but we still have to specify this aliasing on the GitHub
end of things.&lt;/p&gt;

&lt;p&gt;To do this, simply make a text file called &lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; and include on the first line&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mydomain.pizza
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is the entire contents of the text file &lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt;. Once this is pushed to the
repository &lt;code class=&quot;highlighter-rouge&quot;&gt;USERNAME/USERNAME.github.io&lt;/code&gt;, the appropriate settings should
automatically update themselves. To check this, go to the respository settings,
scroll down to the “GitHub Pages” settings, and look under “Custom domain.” You
should see something like the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/github_repo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If the DNS record of your Google domain has not yet been updated, then you will
see &lt;code class=&quot;highlighter-rouge&quot;&gt;Your site is ready to be published mydomain.pizza&lt;/code&gt; on a yellow
background. Note that it sometimes takes up to 48 hours for DNS records to
update, so be patient.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Once the DNS records have updated, you should be able to see your site at
&lt;code class=&quot;highlighter-rouge&quot;&gt;mydomain.pizza&lt;/code&gt;. You can check out &lt;a href=&quot;https://www.github.com/peterewills/peterewills.github.io&quot;&gt;the repository for my site&lt;/a&gt; to see
examples of what I’ve gone through here; including my &lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; file, my
&lt;code class=&quot;highlighter-rouge&quot;&gt;_include/scripts.html&lt;/code&gt; file that enables MathJax, and my &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;
file. Please let me know, either by email or in the comments, if you have any
questions or corrections!&lt;/p&gt;

&lt;!-------------------------------- FOOTER ----------------------------&gt;

&lt;!-- Wish we could put this in _includes/scripts.html. But it doesn't run from --&gt;
&lt;!-- there. It needs to be run at the bottom of the file, rather than at the   --&gt;
&lt;!-- top; perhaps that has something to do with it. Anyways, I'll just include --&gt;
&lt;!-- this chunk of HTML at the footer of all my posts, even though its fugly.  --&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://pwills-com.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:fnote1&quot;&gt;
      &lt;p&gt;Presumably emacs. &lt;a href=&quot;#fnref:fnote1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote2&quot;&gt;
      &lt;p&gt;Some &lt;a href=&quot;http://dasonk.com/blog/2012/10/09/Using-Jekyll-and-Mathjax&quot;&gt;older blog posts&lt;/a&gt; discuss the process of adding kramdown as
the markdown rendering engine, but this is default behavior for Jekyll 3.x,
so there’s no need to do this step. &lt;a href=&quot;#fnref:fnote2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote3&quot;&gt;
      &lt;p&gt;Michael, the guy who built Minimal Mistakes, is really wonderful
about responding to issues on GitHub, which are really used as a support
forum for people using the theme who have no experience in web development
(such as myself). &lt;a href=&quot;#fnref:fnote3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Rosana Zenil-Ferguson</name><email>roszenil@hawaii.edu</email></author><category term="posts" /><summary type="html">I learned a lot while building this website; I hope to share it so that it might be helpful for anyone trying to do the same. I’m sure you’ll notice that I’m far from an expert in the subjects we’re going to explore here; this is my first foray into web development. If you have any corrections, or things I’ve misunderstood, I’d love to hear about it! Just post a comment.</summary></entry><entry><title type="html">Anomaly Detection in Dynamic Networks</title><link href="roszenil.github.io/posts/2017/09/09/dynamic.html" rel="alternate" type="text/html" title="Anomaly Detection in Dynamic Networks" /><published>2017-09-09T00:00:00-10:00</published><updated>2017-09-09T00:00:00-10:00</updated><id>roszenil.github.io/posts/2017/09/09/dynamic</id><content type="html" xml:base="roszenil.github.io/posts/2017/09/09/dynamic.html">&lt;p&gt;“Data analysis” is a hugely popular thing these days, for obvious reasons. When
most people think of “data,” they think of a table where the columns are
variables and the rows are observations…&lt;/p&gt;

&lt;p&gt;If you are not automatically redirected, please &lt;a href=&quot;/portfolio/networks&quot;&gt;click here&lt;/a&gt;&lt;/p&gt;

&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=/portfolio/networks&quot; /&gt;</content><author><name>Rosana Zenil-Ferguson</name><email>roszenil@hawaii.edu</email></author><category term="posts" /><summary type="html">“Data analysis” is a hugely popular thing these days, for obvious reasons. When most people think of “data,” they think of a table where the columns are variables and the rows are observations…</summary></entry><entry><title type="html">NetComp: Network Comparison in Python</title><link href="roszenil.github.io/posts/2017/06/06/netcomp.html" rel="alternate" type="text/html" title="NetComp: Network Comparison in Python" /><published>2017-06-06T00:00:00-10:00</published><updated>2017-06-06T00:00:00-10:00</updated><id>roszenil.github.io/posts/2017/06/06/netcomp</id><content type="html" xml:base="roszenil.github.io/posts/2017/06/06/netcomp.html">&lt;p&gt;As I worked on my research on network data analysis, it became clear that there
was a need for a Python library that implemented the analytical tools I was
interested in. The ubiquitous NetworkX package contains quite a few metrics,
but since it is such a popular package, it does not implement research
algorithms until they reach a high level of maturity. I decided to build
NetComp in order to bridge this gap…&lt;/p&gt;

&lt;p&gt;If you are not automatically redirected, please &lt;a href=&quot;/portfolio/netcomp&quot;&gt;click here&lt;/a&gt;&lt;/p&gt;

&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=/portfolio/netcomp&quot; /&gt;</content><author><name>Rosana Zenil-Ferguson</name><email>roszenil@hawaii.edu</email></author><category term="posts" /><summary type="html">As I worked on my research on network data analysis, it became clear that there was a need for a Python library that implemented the analytical tools I was interested in. The ubiquitous NetworkX package contains quite a few metrics, but since it is such a popular package, it does not implement research algorithms until they reach a high level of maturity. I decided to build NetComp in order to bridge this gap…</summary></entry></feed>